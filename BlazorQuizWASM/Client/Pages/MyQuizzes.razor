@page "/myquizzes"
@using System.ComponentModel.DataAnnotations;
@using BlazorQuizWASM.Shared.DTO;
@using Microsoft.AspNetCore.Authorization;
@using MudBlazor;
@using System.Text.Json;
@using System.Text;
@using BlazorQuizWASM.Shared.Services;
@using BlazorQuizWASM.Client.Shared.Components;
@inject HttpClient _http;

<PageTitle>My Quizzes</PageTitle>

@if (questions != null)
{
    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Published Questions">
            @foreach (var question in FilteredQuestions(true))
            {
                <MudExpansionPanel Text="@question?.Question?.Title">
                    <ul>
                        @if (question?.Answers != null)
                        {
                            @foreach (var answer in question.Answers)
                            {
                                <li>
                                    @answer.Content
                                    <b>@(answer.IsCorrect ? "(true)" : "(false)")</b>
                                </li>
                            }
                        }
                    </ul>
                </MudExpansionPanel>
            }
        </MudExpansionPanel>

        <MudExpansionPanel Text="Not Published Questions">
            @foreach (var question in FilteredQuestions(false))
            {
                <MudExpansionPanel Text="@question?.Question?.Title">
                    <ul>
                        @if (question?.Answers != null)
                        {
                            @foreach (var answer in question.Answers)
                            {
                                <li>
                                    @answer.Content
                                    <b>@(answer.IsCorrect ? "(true)" : "(false)")</b>
                                </li>
                            }
                        }
                    </ul>
                    @if (question?.Question != null)
                    {
                        @if (question?.Answers != null)
                        {
                            <MudButton OnClick="@(async() => await PublishQuestion(question.Question.QuestionPath))"
                                       Variant="Variant.Filled"
                                       Color="Color.Success">
                                Publish
                            </MudButton>
                        }

                        <MudButton OnClick="@(async() => await DeleteQuestion(question.Question.QuestionPath))"
                                   Variant="Variant.Filled"
                                   Color="Color.Error">Delete</MudButton>
                    }
                </MudExpansionPanel>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
}
else
{
    <MudExpansionPanel>@errorMessage</MudExpansionPanel>
}

@code {
    private List<AnswersQuestionResponseDto>? questions;
    private string? errorMessage = "No questions here";

    protected override async Task OnInitializedAsync()
    {
        await FetchQuestions();
    }

    private IEnumerable<AnswersQuestionResponseDto> FilteredQuestions(bool isPublished)
    {
        return questions.Where(q => q.Question != null && q.Question?.IsPublished == isPublished);
    }

    private async Task FetchQuestions()
    {
        var response = await _http.GetAsync("/api/Questions/questions-with-answers");

        if (response.IsSuccessStatusCode)
        {
            questions = await response.Content.ReadFromJsonAsync<List<AnswersQuestionResponseDto>>();


            if (questions == null)
            {
                errorMessage = "There was an error deserializing the response!";
                throw new Exception($"There was an error deserializing the response! {errorMessage}, \nStatusCode {response.StatusCode}, \nresponse Content {response.Content},  \nresponse Headers {response.Headers}  ");
            }
        }
        else
        {
            errorMessage = response.ReasonPhrase;
            throw new Exception($"There was an error in the response! {errorMessage}, \nStatusCode {response.StatusCode}, \nresponse Content {response.Content},  \nresponse Headers {response.Headers}  ");
        }
    }

    private async Task PublishQuestion(string questionPath)
    {
        var response = await _http.PutAsJsonAsync($"/api/Questions/question/{questionPath}", questionPath);

        if (response.IsSuccessStatusCode)
        {
            await FetchQuestions();
        }
        else
        {
            errorMessage = response.ReasonPhrase;
            throw new Exception($"There was an error in the response! {errorMessage}, \nStatusCode {response.StatusCode}, \nresponse Content {response.Content},  \nresponse Headers {response.Headers}  ");
        }
    }

    private async Task DeleteQuestion(string questionPath)
    {
        var response = await _http.DeleteAsync($"/api/Questions/question/{questionPath}");

        if (response.IsSuccessStatusCode)
        {
            await FetchQuestions();
        }
        else
        {
            errorMessage = response.ReasonPhrase;
            throw new Exception($"There was an error in the response! {errorMessage}, \nStatusCode {response.StatusCode}, \nresponse Content {response.Content},  \nresponse Headers {response.Headers}  ");
        }
    }
}
