@page "/quizparticipants"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorQuizWASM.Shared.DTO
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Answered Quizzes</PageTitle>

<MudText Color="Color.Primary"
         Typo="Typo.h3"
         Align="Align.Center">
    Answered Quizzes
</MudText>

<div class="ma-5 d-flex justify-center">
    <MudTable Items="@quizItems">
        <HeaderContent>
            <MudTh>Question</MudTh>
            <MudTh>Participant</MudTh>
            <MudTh>Time Spent in Minutes</MudTh>
            <MudTh>Score</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Question">@context.QuestionTitle</MudTd>
            <MudTd DataLabel="Participant">@context?.QuizItem?.Nickname</MudTd>
            <MudTd DataLabel="Time Spent in Minutes">@context?.QuizItem?.TimeSpent</MudTd>
            <MudTd DataLabel="Score">@((context?.QuizItem?.IsScored == true ? 1 : 0))</MudTd>
            </RowTemplate>

        </MudTable>
    </div>


    @code {
    private List<QuizItemQuestionResponseDto>? quizItems;
    private string? errorMessage = "No questions/items here";

    protected override async Task OnInitializedAsync()
    {
        await FetchParticipants();
    }

    private async Task FetchParticipants()
    {
        var response = await Http.GetAsync($"api/QuizItems");

        if (response.IsSuccessStatusCode)
        {
            quizItems = await response.Content.ReadFromJsonAsync<List<QuizItemQuestionResponseDto>>();
        }
        else
        {
            throw new Exception($"There was an error in the response! {response.ReasonPhrase}, \nStatusCode {response.StatusCode}, \nresponse Content {response.Content},  \nresponse Headers {response.Headers}");
        }
    }
}
