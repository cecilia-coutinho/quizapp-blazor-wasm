@using System.Net.Http.Headers
@using BlazorQuizWASM.Shared.DTO;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.Extensions.Logging
@inject HttpClient _http;
@inject ILogger<FormMediaUploadRequest> _logger

<p>
    <label>
        <InputFile OnChange="@OpenFile" />
    </label>
    <div style="margin-top: 15px">
    <button 
        class="btn btn-block btn-success" 
        @onclick="async () => await LoadFiles()">
        Upload File
    </button> 
    </div>

</p>

@if (selectedFile != null)
{
    <div class="card">
        <div class="card-body">
            File: @selectedFile.Name
            <br />
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div 
                    class="alert alert-success" 
                    style="margin-top: 15px"
                    role="alert">
                    @successMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(failMessage))
            {
                <div 
                    class="alert alert-warning"
                    style="margin-top: 15px"
                    role="alert">
                    @successMessage
                </div>
            }
        </div>
    </div>
}

@code {
    private IBrowserFile? selectedFile;
    private long maxFileSize = 1024 * 1024;
    private bool shouldRender;
    private string successMessage = string.Empty;
    private string failMessage = string.Empty;

    private async Task OpenFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        await Task.CompletedTask;
    }

    private async Task LoadFiles()
    {
        shouldRender = false;
        bool upload = false;
        using var content = new MultipartFormDataContent();

        if (selectedFile != null)
        {
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxFileSize));

            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);

            content.Add(
                content: fileContent,
                name: "File",
                fileName: selectedFile.Name);

            upload = true;

            if (upload)
            {
                //Token requests occur automatically.
                //await _quizService.RequestAuthToken();
                var response = await _http.PostAsync("api/MediaFiles/Upload", content);

                if (response.IsSuccessStatusCode)
                {
                    successMessage = "File uploaded successfully!";
                    _logger.LogInformation(successMessage);
                }
                else
                {
                    failMessage = "Error uploading file";
                    _logger.LogError("Error uploading file {FileName}: Status code {StatusCode}", selectedFile.Name, response.StatusCode);

                }
            }
            shouldRender = true;
        }       
    }
}