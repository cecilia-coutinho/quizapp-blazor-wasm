@using System.Net.Http.Headers
@using BlazorQuizWASM.Shared.DTO;
@using System.Text.Json;
@using System.Text;
@using Microsoft.Extensions.Logging
@inject HttpClient _http;
@inject ILogger<FormMediaUploadRequest> _logger

<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (files.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>
                        File: @file.Name
                        <br>
                        @if (FileUpload(loadedFiles, file.Name, _logger,
                       out var result))
                        {
                            <span>
                                Stored File Name: @result.StoredFileName
                            </span>
                        }
                        else
                        {
                            <span>
                                There was an error uploading the file
                                (Error: @result.ErrorCode).
                            </span>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<File> files = new();
    private long maxFileSize = 1024 * 1024;
    private int maxAllowedFiles = 1;
    private List<MediaFileResponseDto> loadedFiles = new();
    private bool shouldRender;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        bool upload = false;
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (loadedFiles.SingleOrDefault(
                f => f.MediaFileName == file.Name) is null)
            {
                try
                {
                    files.Add(new() { Name = file.Name });

                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                    //files.Add(file.Name);

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;


                }
                catch (Exception ex)
                {
                    _logger.LogInformation("{FileName} not uploaded (Err: 6): {Message}",file.Name, ex.Message);

                    loadedFiles.Add(
                        new()
                            {
                                MediaFileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }

                if (upload)
                {
                    var response = await _http.PostAsync("/api/MediaFiles/Upload", content);

                    if (response.IsSuccessStatusCode)
                    {
                        try
                        {

                            // Deserialize the response content
                            var jsonResponse = await response.Content.ReadAsStringAsync();
                            var newUploadResults = JsonSerializer.Deserialize<List<MediaFileResponseDto>>(jsonResponse, new JsonSerializerOptions
                            {
                                PropertyNameCaseInsensitive = true
                            });

                            if (newUploadResults != null)
                            {
                                loadedFiles.AddRange(newUploadResults);
                            }
                            else
                            {
                                // Handle null response
                                _logger.LogError("Received null response when deserializing MediaFileResponseDto list.");
                            }
                            // var newUploadResults = await response.Content.ReadFromJsonAsync<IList<MediaFileResponseDto>>();

                            // if (newUploadResults != null)
                            // {
                            //     loadedFiles.AddRange(newUploadResults);
                            //     //loadedFiles = loadedFiles.Concat(newUploadResults).ToList();
                            // }
                            // string responseContent = await response.Content.ReadAsStringAsync();

                        }
                        catch (JsonException ex)
                        {
                            _logger.LogError("Error deserializing JSON: {Message}", ex.Message);
                        }
                    }
                }
                shouldRender = true;
            }

        }
    }


    private string? GetStoredFileName(string fileName)
    {
        var uploadResult = loadedFiles.SingleOrDefault(f => f.MediaFileName == fileName);

        if (uploadResult != null)
        {
            return uploadResult.StoredFileName;
        }
        return "File not found";
    }

    private static bool FileUpload(IList<MediaFileResponseDto> uploadResults,
    string? fileName, ILogger<FormMediaUploadRequest> logger, out MediaFileResponseDto result)
    {
        result = uploadResults.SingleOrDefault(f => f.MediaFileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }

}